{"version":3,"sources":["logo.svg","helpers/Constants.ts","services/ApiService.ts","services/AuthService.ts","components/JsonTreeViewer.tsx","components/AuthContent.tsx","components/Buttons.tsx","components/AppContent.tsx","components/Header.tsx","containers/App.tsx","registerServiceWorker.ts","index.tsx"],"names":["module","exports","Constants","stsAuthority","clientId","clientRoot","clientScope","apiRoot","ApiService","auth","authService","this","url","getUser","then","user","access_token","_callApi","catch","error","response","status","renewToken","renewedUser","Error","token","headers","Accept","Authorization","axios","get","AuthService","hostedDomain","userManager","scope","console","log","UserManager","authority","client_id","redirect_uri","silent_redirect_uri","post_logout_redirect_uri","response_type","Log","logger","level","INFO","signinRedirect","signinSilent","signoutRedirect","JsonTreeViewer","R","props","data","title","theme","shouldExpandNode","renderJsonData","React","AuthContent","keyPath","className","api","Buttons","style","marginTop","margin","onClick","login","callApi","logout","AppContent","apiService","shouldCancel","setState","toast","success","info","hd","sessionStorage","getItem","state","textAlign","display","marginBottom","type","value","onChange","e","setItem","target","Header","src","logoSrc","alt","pageTitle","App","logo","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","document","getElementById","URL","process","toString","origin","addEventListener","fetch","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f051b7c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export class Constants {\n  public static stsAuthority = 'https://issuer.zitadel.ch/';\n  public static clientId = '84891356119558811@zitadel_net';\n  public static clientRoot = 'https://localhost:5001/hd-jwt/';\n  public static clientScope = 'openid profile email';\n\n  public static apiRoot = 'https://localhost:5001/';\n}\n","import axios from 'axios';\nimport { Constants } from '../helpers/Constants';\nimport { AuthService } from './AuthService';\n\nexport class ApiService {\n  private authService: AuthService;\n\n  constructor(auth: AuthService) {\n    this.authService = auth;\n  }\n\n  public callApi(url: string): Promise<any> {\n    return this.authService.getUser().then((user) => {\n      if (user && user.access_token) {\n        return this._callApi(url, user.access_token).catch((error) => {\n          if (error.response.status === 401) {\n            return this.authService.renewToken().then((renewedUser) => {\n              return this._callApi(url, renewedUser.access_token);\n            });\n          }\n          throw error;\n        });\n      } else if (user) {\n        return this.authService.renewToken().then((renewedUser) => {\n          return this._callApi(url, renewedUser.access_token);\n        });\n      } else {\n        throw new Error('user is not logged in');\n      }\n    });\n  }\n\n  private _callApi(url: string, token: string) {\n    const headers = {\n      Accept: 'application/json',\n      Authorization: 'Bearer ' + token,\n    };\n\n    return axios.get(Constants.apiRoot + url, { headers });\n  }\n}\n","import { Log, User, UserManager } from 'oidc-client';\nimport { Constants } from '../helpers/Constants';\n\nexport class AuthService {\n  public userManager: UserManager;\n\n  constructor(hostedDomain: string | null) {\n    let scope = Constants.clientScope;\n    if (!!hostedDomain) {\n      scope += ' urn:zitadel:iam:org:domain:primary:';\n      scope += hostedDomain;\n    }\n    console.log('Constructed scope:', scope);\n\n    this.userManager = new UserManager({\n      authority: Constants.stsAuthority,\n      client_id: Constants.clientId,\n      redirect_uri: `${Constants.clientRoot}signin-callback.html`,\n      silent_redirect_uri: `${Constants.clientRoot}silent-renew.html`,\n      // tslint:disable-next-line:object-literal-sort-keys\n      post_logout_redirect_uri: `${Constants.clientRoot}`,\n      response_type: 'code',\n      scope,\n    });\n\n    Log.logger = console;\n    Log.level = Log.INFO;\n  }\n\n  public getUser(): Promise<User | null> {\n    return this.userManager.getUser();\n  }\n\n  public login(): Promise<void> {\n    return this.userManager.signinRedirect();\n  }\n\n  public renewToken(): Promise<User> {\n    return this.userManager.signinSilent();\n  }\n\n  public logout(): Promise<void> {\n    return this.userManager.signoutRedirect();\n  }\n}\n","import * as R from 'ramda';\nimport * as React from 'react';\nimport JSONTree from 'react-json-tree';\n\nexport interface IJsonTreeViewer {\n  data: any;\n  title: string;\n  shouldExpandNode?: (keyPath: Array<string | number>, data: [any] | {}, level: number) => boolean;\n}\n\nexport default class JsonTreeViewer extends React.Component<IJsonTreeViewer, any> {\n  public renderJsonData() {\n    return R.not(R.isEmpty(this.props.data)) && R.not(R.isNil(this.props.data)) ? (\n      <>\n        <h1>{this.props.title}</h1>\n        <JSONTree data={this.props.data} theme=\"bright\" shouldExpandNode={this.props.shouldExpandNode} />\n      </>\n    ) : null;\n  }\n\n  public render() {\n    return this.renderJsonData();\n  }\n}\n","import * as React from 'react';\nimport JsonTreeViewer from './JsonTreeViewer';\n\nexport interface IAuthContentProps {\n  api: any;\n  user: any;\n}\n\nexport default class AuthContent extends React.Component<IAuthContentProps, any> {\n  public shouldExpandNode = (keyPath: Array<string | number>, data: [any] | {}, level: number) => {\n    return true;\n  };\n\n  public render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <JsonTreeViewer data={this.props.user} title=\"User Profile\" shouldExpandNode={this.shouldExpandNode} />\n        </div>\n        <div className=\"col-md-6\">\n          <JsonTreeViewer data={this.props.api} title=\"Api Response\" shouldExpandNode={this.shouldExpandNode} />\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\n\ninterface IButtonsProps {\n  login: () => void;\n  getUser: () => void;\n  callApi: () => void;\n  renewToken: () => void;\n  logout: () => void;\n}\n\nconst Buttons: React.SFC<IButtonsProps> = props => {\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-12 text-center\" style={{ marginTop: '30px' }}>\n        <button className=\"btn btn-primary btn-login\" style={{ margin: '10px' }} onClick={props.login}>\n          Login\n        </button>\n        <button className=\"btn btn-secondary btn-getuser\" style={{ margin: '10px' }} onClick={props.getUser}>\n          Get User info\n        </button>\n        <button className=\"btn btn-warning btn-getapi\" style={{ margin: '10px' }} onClick={props.callApi}>\n          Call API\n        </button>\n        <button className=\"btn btn-success btn-renewtoken\" style={{ margin: '10px' }} onClick={props.renewToken}>\n          Renew Token\n        </button>\n        <button className=\"btn btn-dark btn-logout\" style={{ margin: '10px' }} onClick={props.logout}>\n          Logout\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Buttons;\n","import * as React from 'react';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { ApiService } from '../services/ApiService';\nimport { AuthService } from '../services/AuthService';\nimport AuthContent from './AuthContent';\nimport Buttons from './Buttons';\n\nexport default class AppContent extends React.Component<any, any> {\n  public authService: AuthService;\n  public apiService: ApiService;\n  private shouldCancel: boolean;\n\n  constructor(props: any) {\n    super(props);\n\n    const hd = sessionStorage.getItem('hd-jwt-hd') ?? 'smartive.zitadel.ch';\n    this.authService = new AuthService(hd);\n    this.apiService = new ApiService(this.authService);\n    this.state = { user: {}, api: {}, hostedDomain: hd ?? '' };\n    this.shouldCancel = false;\n  }\n\n  public componentDidMount() {\n    this.getUser();\n  }\n\n  public login = () => {\n    this.authService.login();\n  };\n\n  public callApi = () => {\n    this.apiService\n      .callApi('authed/hd-jwt')\n      .then((data) => {\n        this.setState({ api: data.data });\n        toast.success('Api return successfully data, check in section - Api response');\n      })\n      .catch((error) => {\n        toast.error(error);\n      });\n  };\n\n  public componentWillUnmount() {\n    this.shouldCancel = true;\n  }\n\n  public renewToken = () => {\n    this.authService\n      .renewToken()\n      .then((user) => {\n        toast.success('Token has been sucessfully renewed. :-)');\n        this.getUser();\n      })\n      .catch((error) => {\n        toast.error(error);\n      });\n  };\n\n  public logout = () => {\n    this.authService.logout();\n  };\n\n  public getUser = () => {\n    this.authService.getUser().then((user) => {\n      if (user) {\n        toast.success('User has been successfully loaded from store.');\n      } else {\n        toast.info('You are not logged in.');\n      }\n\n      if (!this.shouldCancel) {\n        this.setState({ user });\n      }\n    });\n  };\n\n  public render() {\n    return (\n      <>\n        <ToastContainer />\n\n        <div style={{ textAlign: 'center', margin: '1rem' }}>\n          <label style={{ display: 'block', marginBottom: '1rem' }}>Hosted Domain (enforced)</label>\n          <input\n            type=\"text\"\n            value={this.state.hostedDomain}\n            onChange={(e) => {\n              sessionStorage.setItem('hd-jwt-hd', e.target.value);\n              this.setState({\n                ...this.state,\n                hostedDomain: e.target.value,\n              });\n              this.authService = new AuthService(e.target.value);\n              this.apiService = new ApiService(this.authService);\n            }}\n          />\n        </div>\n\n        <Buttons\n          login={this.login}\n          logout={this.logout}\n          renewToken={this.renewToken}\n          getUser={this.getUser}\n          callApi={this.callApi}\n        />\n\n        <AuthContent api={this.state.api} user={this.state.user} />\n      </>\n    );\n  }\n}\n","import * as React from 'react';\n\nexport interface IHeaderProps {\n  pageTitle: string;\n  logoSrc: any;\n}\n\nexport default function Header(props: IHeaderProps) {\n  return (\n    <header className=\"App-header\">\n      <img src={props.logoSrc} className=\"App-logo\" alt=\"logo\" />\n      <h1 className=\"App-title\">{props.pageTitle}</h1>\n    </header>\n  );\n}\n","import * as React from 'react';\nimport AppContent from '../components/AppContent';\nimport Header from '../components/Header';\nimport logo from '../logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <div className=\"App\">\n        <Header pageTitle=\"Welcome to React and oidc-client-js\" logoSrc={logo} />\n        <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <AppContent />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport 'react-app-polyfill/ie11';\nimport 'core-js';\n\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement);\nregisterServiceWorker();\n"],"sourceRoot":""}